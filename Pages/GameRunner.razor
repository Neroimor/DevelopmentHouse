@using MyDevelopmentHouse.DTO
<div class="charterBack" tabindex="0" @onkeydown="HandleKeyDownAsync">
    <img class="charter" src="Logo/Logo.jpg" alt="Logo" style="@customStyle" />
    @foreach (var image in Images)
    {
        <img class="charter" src="@image.Src" style="@customEnemyStyle" />
    }
</div>



<p class="Pad">Счёт: @CountWinner</p>
@code {
    private int x = 0;
    private int y = 0;

    enum StateSpace { Ready, Jumping, Falling }
    enum StateMove { Right, Left, Stand }
    private StateSpace stateSpace = StateSpace.Ready;
    private StateMove stateMove = StateMove.Stand;

    private int CountWinner = 0;
    private string customStyle => $"transform: translate({x}px, {y}px); transition: transform 0.05s linear;";

    private async Task HandleKeyDownAsync(KeyboardEventArgs e)
    {
        if ((e.Key == " " || e.Code == "Space" || e.Code =="ArrowUp") && stateSpace == StateSpace.Ready)
        {
            stateSpace = StateSpace.Jumping;
            await ExecuteJumpAsync();
        }

        if (e.Key == "ArrowLeft" && stateMove == StateMove.Stand)
        {
            stateMove = StateMove.Left;
            await MoveLeft();
        }
        else if (e.Key == "ArrowRight" && stateMove == StateMove.Stand)
        {
            stateMove = StateMove.Right;
            await MoveRight();
        }

    }
    private async Task MoveLeft()
    {
        int maxLeft = 230;
        int step = 16;
        int delay = 10;
        int countStep = 0;
        if (x > -maxLeft)
        {
            while (countStep < step)
            {
                x -= 2;
                countStep++;
                StateHasChanged();
                await Task.Delay(delay);
            }

        }
        stateMove = StateMove.Stand;

    }
    private async Task MoveRight()
    {
        int maxRight = 230;
        int step = 8;
        int delay = 10;
        int countStep = 0;
        if (x < maxRight)
        {
            while (countStep < step)
            {
                x += 2;
                countStep++;
                StateHasChanged();
                await Task.Delay(delay);
            }

        }
        stateMove = StateMove.Stand;

    }
    private async Task ExecuteJumpAsync()
    {
        int jumpHeight = 100;
        int step = 8;
        int delay = 20;

        while (y > -jumpHeight)
        {
            y -= step;
            StateHasChanged();
            await Task.Delay(delay);
        }

        stateSpace = StateSpace.Falling;

        while (y < 0)
        {
            y += step;
            StateHasChanged();
            await Task.Delay(delay);
        }

        y = 0;
        stateSpace = StateSpace.Ready;
    }

    private List<ImageItem> Images = new List<ImageItem>();

    private void UpdateImageStyles()
    {
        // Если хотите, вы можете менять стиль у всех элементов,
        // например, путем перебора списка и обновления свойства Style.
        // foreach (var image in Images)
        // {
        //     Здесь можно использовать общее значение customStyle,
        //     либо сделать для каждого изображения индивидуальный расчет.
        //     image.Style = customStyle;
        // }
    }
    private int startEnemyPosition = 230;
    private string customEnemyStyle => $"transform: translate({startEnemyPosition}px, {0}px); transition: transform 0.05s linear;";
    protected override void OnInitialized()
    {
        Images.Add(new ImageItem
            {
                Src = "Logo/Logo.jpg",
                Alt = "Logo",
                Style = customEnemyStyle
            });
    }

}
